{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/saksham/Desktop/ReactNativeAssignment/AwesomeProject/node_modules/react-native-sticky-parallax-header/src/predefinedComponents/components/QuizOption/QuizOption.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { string, bool, shape, func } from 'prop-types';\nimport styles from \"./QuizOption.styles\";\nimport { colors } from \"../../../constants\";\n\nvar QuizOption = function QuizOption(_ref) {\n  var reveal = _ref.reveal,\n      revealed = _ref.revealed,\n      _ref$card = _ref.card,\n      number = _ref$card.number,\n      question = _ref$card.question,\n      value = _ref$card.value;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      picked = _useState2[0],\n      setPicked = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      paddingVertical = _useState4[0],\n      setPaddingVertical = _useState4[1];\n\n  var calcPaddings = function calcPaddings(event) {\n    var height = event.nativeEvent.layout.height;\n    var circleRadius = 40;\n    var padding = height > circleRadius ? height / 2.5 : 0;\n    setPaddingVertical(padding);\n  };\n\n  var renderValue = function renderValue() {\n    if (value) {\n      return React.createElement(Image, {\n        source: require(\"../../../assets/icons/Check.png\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return React.createElement(Image, {\n      source: require(\"../../../assets/icons/Close.png\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    });\n  };\n\n  if (revealed) {\n    var backgroundColor = 'white';\n    var color = 'black';\n    if (picked) color = 'white';\n    if (picked && value) backgroundColor = colors.jade;\n    if (picked && !value) backgroundColor = colors.coralPink;\n    return React.createElement(View, {\n      style: [styles.container, {\n        backgroundColor: backgroundColor\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: [styles.letterContainer, {\n        paddingVertical: paddingVertical\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, renderValue()), React.createElement(View, {\n      onLayout: function onLayout(event) {\n        calcPaddings(event);\n      },\n      style: styles.textContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: [styles.text, {\n        color: color\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, question)));\n  }\n\n  return React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      reveal();\n      setPicked(true);\n    },\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.letterContainer, {\n      paddingVertical: paddingVertical\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.letter,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, number)), React.createElement(View, {\n    onLayout: function onLayout(event) {\n      calcPaddings(event);\n    },\n    style: styles.textContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, question)));\n};\n\nQuizOption.propTypes = {\n  card: shape({\n    number: string,\n    question: string,\n    value: bool,\n    picked: bool\n  }),\n  reveal: func,\n  revealed: bool\n};\nexport default QuizOption;","map":{"version":3,"sources":["/home/saksham/Desktop/ReactNativeAssignment/AwesomeProject/node_modules/react-native-sticky-parallax-header/src/predefinedComponents/components/QuizOption/QuizOption.js"],"names":["React","useState","string","bool","shape","func","styles","colors","QuizOption","reveal","revealed","card","number","question","value","picked","setPicked","paddingVertical","setPaddingVertical","calcPaddings","event","height","nativeEvent","layout","circleRadius","padding","renderValue","require","backgroundColor","color","jade","coralPink","container","letterContainer","textContainer","text","letter","propTypes"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, Image, TouchableOpacity } from 'react-native';\nimport { string, bool, shape, func } from 'prop-types';\nimport styles from './QuizOption.styles';\nimport { colors } from '../../../constants';\n\nconst QuizOption = ({ reveal, revealed, card: { number, question, value } }) => {\n  const [picked, setPicked] = useState(false);\n  const [paddingVertical, setPaddingVertical] = useState(0);\n  const calcPaddings = (event) => {\n    const { height } = event.nativeEvent.layout;\n    const circleRadius = 40;\n    const padding = height > circleRadius ? height / 2.5 : 0;\n    setPaddingVertical(padding);\n  };\n\n  const renderValue = () => {\n    if (value) {\n      return <Image source={require('../../../assets/icons/Check.png')} />;\n    }\n\n    return <Image source={require('../../../assets/icons/Close.png')} />;\n  };\n\n  if (revealed) {\n    let backgroundColor = 'white';\n    let color = 'black';\n    if (picked) color = 'white';\n    if (picked && value) backgroundColor = colors.jade;\n    if (picked && !value) backgroundColor = colors.coralPink;\n\n    return (\n      <View style={[styles.container, { backgroundColor }]}>\n        <View style={[styles.letterContainer, { paddingVertical }]}>{renderValue()}</View>\n        <View\n          onLayout={(event) => {\n            calcPaddings(event);\n          }}\n          style={styles.textContainer}>\n          <Text style={[styles.text, { color }]}>{question}</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <TouchableOpacity\n      onPress={() => {\n        reveal();\n        setPicked(true);\n      }}\n      style={styles.container}>\n      <View style={[styles.letterContainer, { paddingVertical }]}>\n        <Text style={styles.letter}>{number}</Text>\n      </View>\n      <View\n        onLayout={(event) => {\n          calcPaddings(event);\n        }}\n        style={styles.textContainer}>\n        <Text style={styles.text}>{question}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nQuizOption.propTypes = {\n  card: shape({\n    number: string,\n    question: string,\n    value: bool,\n    picked: bool,\n  }),\n  reveal: func,\n  revealed: bool,\n};\n\nexport default QuizOption;\n"]},"metadata":{},"sourceType":"module"}