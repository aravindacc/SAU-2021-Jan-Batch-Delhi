{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/saksham/Desktop/ReactNativeAssignment/AwesomeProject/node_modules/react-native-sticky-parallax-header/src/predefinedComponents/components/QuizCard/QuizCard.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { func, string, shape, bool, number } from 'prop-types';\nimport styles from \"./QuizCard.styles\";\nimport QuizOption from \"../QuizOption/QuizOption\";\n\nvar QuizCard = function QuizCard(_ref) {\n  var _ref$data = _ref.data,\n      question = _ref$data.question,\n      cards = _ref$data.cards,\n      num = _ref.num,\n      onPress = _ref.onPress,\n      cardsAmount = _ref.cardsAmount;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      revealed = _useState2[0],\n      setRevealed = _useState2[1];\n\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    style: styles.container,\n    activeOpacity: 0.95,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.labelContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.labelTextContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.labelText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, num + 1 + \"/\" + cardsAmount))), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.mainText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, question)), cards.map(function (card) {\n    return React.createElement(QuizOption, {\n      key: card.question,\n      reveal: function reveal() {\n        setRevealed(true);\n      },\n      revealed: revealed,\n      card: card,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\nQuizCard.propTypes = {\n  onPress: func,\n  data: shape({\n    number: string,\n    question: string,\n    value: bool,\n    revealed: bool,\n    picked: bool\n  }),\n  num: number,\n  cardsAmount: number\n};\nexport default QuizCard;","map":{"version":3,"sources":["/home/saksham/Desktop/ReactNativeAssignment/AwesomeProject/node_modules/react-native-sticky-parallax-header/src/predefinedComponents/components/QuizCard/QuizCard.js"],"names":["React","useState","func","string","shape","bool","number","styles","QuizOption","QuizCard","data","question","cards","num","onPress","cardsAmount","revealed","setRevealed","container","labelContainer","labelTextContainer","labelText","mainText","map","card","propTypes","value","picked"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,IAA9B,EAAoCC,MAApC,QAAkD,YAAlD;AACA,OAAOC,MAAP;AACA,OAAOC,UAAP;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA8D;AAAA,uBAA3DC,IAA2D;AAAA,MAAnDC,QAAmD,aAAnDA,QAAmD;AAAA,MAAzCC,KAAyC,aAAzCA,KAAyC;AAAA,MAAhCC,GAAgC,QAAhCA,GAAgC;AAAA,MAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBAC7Cd,QAAQ,CAAC,KAAD,CADqC;AAAA;AAAA,MACtEe,QADsE;AAAA,MAC5DC,WAD4D;;AAG7E,SACE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEH,OAA3B;AAAoC,IAAA,KAAK,EAAEP,MAAM,CAACW,SAAlD;AAA6D,IAAA,aAAa,EAAE,IAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACY,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEZ,MAAM,CAACa,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACc,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCR,GAAG,GAAG,CAAzC,SAA8CE,WAA9C,CADF,CADF,CADF,EAME,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAER,MAAM,CAACe,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BX,QAA/B,CADF,CANF,EASGC,KAAK,CAACW,GAAN,CAAU,UAACC,IAAD;AAAA,WACT,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACb,QADZ;AAEE,MAAA,MAAM,EAAE,kBAAM;AACZM,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAJH;AAKE,MAAA,QAAQ,EAAED,QALZ;AAME,MAAA,IAAI,EAAEQ,IANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS;AAAA,GAAV,CATH,CADF;AAsBD,CAzBD;;AA2BAf,QAAQ,CAACgB,SAAT,GAAqB;AACnBX,EAAAA,OAAO,EAAEZ,IADU;AAEnBQ,EAAAA,IAAI,EAAEN,KAAK,CAAC;AACVE,IAAAA,MAAM,EAAEH,MADE;AAEVQ,IAAAA,QAAQ,EAAER,MAFA;AAGVuB,IAAAA,KAAK,EAAErB,IAHG;AAIVW,IAAAA,QAAQ,EAAEX,IAJA;AAKVsB,IAAAA,MAAM,EAAEtB;AALE,GAAD,CAFQ;AASnBQ,EAAAA,GAAG,EAAEP,MATc;AAUnBS,EAAAA,WAAW,EAAET;AAVM,CAArB;AAaA,eAAeG,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { func, string, shape, bool, number } from 'prop-types';\nimport styles from './QuizCard.styles';\nimport QuizOption from '../QuizOption/QuizOption';\n\nconst QuizCard = ({ data: { question, cards }, num, onPress, cardsAmount }) => {\n  const [revealed, setRevealed] = useState(false);\n\n  return (\n    <TouchableOpacity onPress={onPress} style={styles.container} activeOpacity={0.95}>\n      <View style={styles.labelContainer}>\n        <View style={styles.labelTextContainer}>\n          <Text style={styles.labelText}>{`${num + 1}/${cardsAmount}`}</Text>\n        </View>\n      </View>\n      <View>\n        <Text style={styles.mainText}>{question}</Text>\n      </View>\n      {cards.map((card) => (\n        <QuizOption\n          key={card.question}\n          reveal={() => {\n            setRevealed(true);\n          }}\n          revealed={revealed}\n          card={card}\n        />\n      ))}\n    </TouchableOpacity>\n  );\n};\n\nQuizCard.propTypes = {\n  onPress: func,\n  data: shape({\n    number: string,\n    question: string,\n    value: bool,\n    revealed: bool,\n    picked: bool,\n  }),\n  num: number,\n  cardsAmount: number,\n};\n\nexport default QuizCard;\n"]},"metadata":{},"sourceType":"module"}