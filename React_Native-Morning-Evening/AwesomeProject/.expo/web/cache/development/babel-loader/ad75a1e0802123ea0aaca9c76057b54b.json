{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/saksham/Desktop/ReactNativeAssignment/AwesomeProject/components/CountryCoronaDetail.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\n\nvar CountryCoronaDetail = function CountryCoronaDetail(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'grey'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: route.params.data.countryInfo.flag\n    },\n    style: {\n      width: '50%',\n      height: Dimensions.get('window').height * 0.4\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      margin: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    style: {\n      flex: 0.4,\n      borderWidth: 5\n    },\n    color: \"darkgrey\",\n    onPress: function onPress() {\n      setModalVisible(true);\n    },\n    title: \"Click me!\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 21\n    }\n  }), React.createElement(Button, {\n    style: {\n      flex: 0.4\n    },\n    color: \"darkgrey\",\n    title: \"view Details\",\n    onPress: function onPress() {\n      Linking.openURL('https://www.accolite.com/');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 21\n    }\n  })), React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      Alert.alert(\"Modal has been closed.\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: styles.centeredView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 25\n    }\n  }, React.createElement(View, {\n    style: styles.modalView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 29\n    }\n  }, React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 33\n    }\n  }, \"Country Name : \", route.params.data.country), React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 33\n    }\n  }, \"Cases : \", route.params.data.cases), React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 33\n    }\n  }, \"Death : \", route.params.data.deaths), React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 33\n    }\n  }, \"Active Cases : \", route.params.data.active), React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 33\n    }\n  }, \"Recovered Cases : \", route.params.data.recovered), React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 33\n    }\n  }, \"Test : \", route.params.data.tests), React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 33\n    }\n  }, \"Population : \", route.params.data.population), React.createElement(Text, {\n    style: styles.modalText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 33\n    }\n  }, \"Continent : \", route.params.data.continent), React.createElement(TouchableHighlight, {\n    style: _objectSpread(_objectSpread({}, styles.openButton), {}, {\n      backgroundColor: \"#2196F3\"\n    }),\n    onPress: function onPress() {\n      setModalVisible(!modalVisible);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 37\n    }\n  }, \"okay!\"))))), React.createElement(ScrollView, {\n    style: {\n      margin: 10,\n      borderWidth: 2,\n      backgroundColor: 'darkgrey'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      padding: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, \"Milestone 2 \\u25CF On the header add a back button to navigate back to the listing screen.(Make sure this header needs to be sticky) \\u25CF Show Image with height 0.4 of the total height of the device. \\u25CF On click of the Click Me! button open a dialog showing \\u201Cyou have pressed the \\u201D \\u25CF On clicking the View Details button open this url (https://www.accolite.com/) into a webview/web browser. \\u25CF Use redux to keep the list data in a global state and when user clicks same source for more than once, instead of making an api request to fetch detail everytime use the data from redux store(Optional) \\u25CF Below the buttons show a description of the product that can be any hardcoded text (more than 500-600 words) so that the screen can be scrollable. \\u25CF On clicking the View Details button open this url (https://www.accolite.com/) into a webview/web browser. \\u25CF Use redux to keep the list data in a global state and when user clicks same source for more than once, instead of making an api request to fetch detail everytime use the data from redux store(Optional) \\u25CF Below the buttons show a description of the product that can be any hardcoded text (more than 500-600 words) so that the screen can be scrollable. \\u25CF On clicking the View Details button open this url (https://www.accolite.com/) into a webview/web browser. \\u25CF Use redux to keep the list data in a global state and when user clicks same source for more than once, instead of making an api request to fetch detail everytime use the data from redux store(Optional) \\u25CF Below the buttons show a description of the product that can be any hardcoded text (more than 500-600 words) so that the screen can be scrollable.\")));\n};\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  openButton: {\n    backgroundColor: \"#F194FF\",\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  }\n});\nexport default CountryCoronaDetail;","map":{"version":3,"sources":["/home/saksham/Desktop/ReactNativeAssignment/AwesomeProject/components/CountryCoronaDetail.js"],"names":["React","useState","CountryCoronaDetail","route","modalVisible","setModalVisible","flex","backgroundColor","uri","params","data","countryInfo","flag","width","height","Dimensions","get","flexDirection","justifyContent","margin","borderWidth","Linking","openURL","Alert","alert","styles","centeredView","modalView","modalText","country","cases","deaths","active","recovered","tests","population","continent","openButton","textStyle","padding","StyleSheet","create","alignItems","marginTop","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","color","fontWeight","textAlign","marginBottom"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {ScrollView, View ,Text,Dimensions, Image, Button , Linking,Alert,Modal,StyleSheet,TouchableHighlight,} from 'react-native';\n// import StickyParallaxHeader from 'react-native-sticky-parallax-header'\n\n\n const CountryCoronaDetail = ({route})=>{\n    const [modalVisible, setModalVisible] = useState(false);\n        return (\n                <View style={{flex:1,backgroundColor:'grey'}}>\n                <Image source={{uri:route.params.data.countryInfo.flag}} style={{width:'50%' ,height :Dimensions.get('window').height*0.4}}></Image>\n                <View style={{flexDirection:'row',justifyContent:'space-around',margin:10}}>\n                    <Button style={{ flex:0.4 ,borderWidth:5 }} color='darkgrey' onPress={() => {setModalVisible(true);}} title=\"Click me!\"></Button>\n                    <Button style={{flex:0.4}} color='darkgrey' title=\"view Details\" onPress={ ()=>{ Linking.openURL('https://www.accolite.com/')}}></Button>\n                </View>\n                    <Modal\n                        animationType=\"slide\"\n                        transparent={true}\n                        visible={modalVisible}\n                        onRequestClose={() => {Alert.alert(\"Modal has been closed.\");}}>\n                        <View style={styles.centeredView}>\n                            <View style={styles.modalView}>\n                                <Text style={styles.modalText}>\n                                    Country Name : {route.params.data.country}    \n                                </Text>\n                                <Text style={styles.modalText}>\n                                    Cases : {route.params.data.cases}    \n                                </Text>\n                                <Text style={styles.modalText}>\n                                    Death : {route.params.data.deaths}    \n                                </Text>\n                                <Text style={styles.modalText}>\n                                    Active Cases : {route.params.data.active}    \n                                </Text>\n\n                                <Text style={styles.modalText}>\n                                    Recovered Cases : {route.params.data.recovered}    \n                                </Text>\n                                <Text style={styles.modalText}>\n                                    Test : {route.params.data.tests}    \n                                </Text>\n                                <Text style={styles.modalText}>\n                                    Population : {route.params.data.population}    \n                                </Text>\n                                <Text style={styles.modalText}>\n                                    Continent : {route.params.data.continent}    \n                                </Text>\n                                <TouchableHighlight\n                                    style={{ ...styles.openButton, backgroundColor: \"#2196F3\" }}\n                                    onPress={() => {setModalVisible(!modalVisible);}}>\n                                    <Text style={styles.textStyle}>okay!</Text>\n                                </TouchableHighlight>\n                            </View>\n                        </View>\n                    </Modal>\n                \n                    < ScrollView style={{margin:10,borderWidth:2,backgroundColor:'darkgrey'}}>\n                    <Text style={{padding:5}} >\n                    Milestone 2 \n● On the header add a back button to navigate back to the listing screen.(Make sure this\nheader needs to be sticky)\n● Show Image with height 0.4 of the total height of the device.\n● On click of the Click Me! button open a dialog showing “you have pressed the\n”\n● On clicking the View Details button open this url (https://www.accolite.com/) into a\nwebview/web browser.\n● Use redux to keep the list data in a global state and when user clicks same source for\nmore than once, instead of making an api request to fetch detail everytime use the data\nfrom redux store(Optional)\n● Below the buttons show a description of the product that can be any hardcoded text\n(more than 500-600 words) so that the screen can be scrollable.\n● On clicking the View Details button open this url (https://www.accolite.com/) into a\nwebview/web browser.\n● Use redux to keep the list data in a global state and when user clicks same source for\nmore than once, instead of making an api request to fetch detail everytime use the data\nfrom redux store(Optional)\n● Below the buttons show a description of the product that can be any hardcoded text\n(more than 500-600 words) so that the screen can be scrollable.\n● On clicking the View Details button open this url (https://www.accolite.com/) into a\nwebview/web browser.\n● Use redux to keep the list data in a global state and when user clicks same source for\nmore than once, instead of making an api request to fetch detail everytime use the data\nfrom redux store(Optional)\n● Below the buttons show a description of the product that can be any hardcoded text\n(more than 500-600 words) so that the screen can be scrollable.\n\n                    </Text>\n                </ScrollView>\n\n            </View>\n\n        );\n    \n}\n\nconst styles = StyleSheet.create({\n    centeredView: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: 22\n    },\n    modalView: {\n      margin: 20,\n      backgroundColor: \"white\",\n      borderRadius: 20,\n      padding: 35,\n      alignItems: \"center\",\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 2\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 3.84,\n      elevation: 5\n    },\n    openButton: {\n      backgroundColor: \"#F194FF\",\n      borderRadius: 20,\n      padding: 10,\n      elevation: 2\n    },\n    textStyle: {\n      color: \"white\",\n      fontWeight: \"bold\",\n      textAlign: \"center\"\n    },\n    modalText: {\n      marginBottom: 15,\n      textAlign: \"center\"\n    }\n  });\n  \n\nexport default CountryCoronaDetail;"]},"metadata":{},"sourceType":"module"}