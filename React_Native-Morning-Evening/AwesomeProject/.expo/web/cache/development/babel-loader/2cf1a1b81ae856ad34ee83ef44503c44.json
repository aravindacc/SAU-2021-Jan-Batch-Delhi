{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    height = _Dimensions$get.height,\n    width = _Dimensions$get.width;\n\nvar scale = width / 320;\nvar deviceWidth = width;\nvar deviceHeight = height;\n\nvar responsiveHeight = function responsiveHeight(h) {\n  return height * (h / 100);\n};\n\nvar responsiveWidth = function responsiveWidth(w) {\n  return width * (w / 100);\n};\n\nvar breakpoints = {\n  smallPhoneWidth: 320,\n  smallPhoneHeight: 600,\n  mediumPhoneWidth: 414,\n  bigPhoneWidth: 480\n};\nvar isSmallScreen = width <= breakpoints.smallPhoneWidth || height <= breakpoints.smallPhoneHeight;\nvar isNormalScreen = width > breakpoints.smallPhoneWidth && width < breakpoints.mediumPhoneWidth;\nvar isBigScreen = width >= breakpoints.mediumPhoneWidth;\nvar isBiggestPhoneScreen = width >= breakpoints.bigPhoneWidth;\nvar isAndroid = Platform.OS === 'android';\n\nvar getResponsiveFontSize = function getResponsiveFontSize(fontSize) {\n  var newSize = fontSize * scale;\n\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  }\n\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n};\n\nvar normalizedFontSize = function normalizedFontSize(basicFontSize) {\n  if (isSmallScreen) {\n    return basicFontSize - 6;\n  }\n\n  if (isNormalScreen) {\n    return basicFontSize;\n  }\n\n  if (isBigScreen) {\n    return basicFontSize + 1;\n  }\n\n  return basicFontSize;\n};\n\nvar scrollPosition = function scrollPosition(scrollHeight, x) {\n  return x * 0.01 * scrollHeight;\n};\n\nexport default {\n  getResponsiveFontSize: getResponsiveFontSize,\n  normalizedFontSize: normalizedFontSize,\n  scrollPosition: scrollPosition,\n  deviceWidth: deviceWidth,\n  deviceHeight: deviceHeight,\n  responsiveHeight: responsiveHeight,\n  responsiveWidth: responsiveWidth,\n  isSmallScreen: isSmallScreen,\n  isNormalScreen: isNormalScreen,\n  isBigScreen: isBigScreen,\n  isBiggestPhoneScreen: isBiggestPhoneScreen,\n  isAndroid: isAndroid\n};","map":{"version":3,"sources":["/home/saksham/Desktop/ReactNativeAssignment/AwesomeProject/node_modules/react-native-sticky-parallax-header/src/constants/constants.js"],"names":["Dimensions","get","height","width","scale","deviceWidth","deviceHeight","responsiveHeight","h","responsiveWidth","w","breakpoints","smallPhoneWidth","smallPhoneHeight","mediumPhoneWidth","bigPhoneWidth","isSmallScreen","isNormalScreen","isBigScreen","isBiggestPhoneScreen","isAndroid","Platform","OS","getResponsiveFontSize","fontSize","newSize","Math","round","PixelRatio","roundToNearestPixel","normalizedFontSize","basicFontSize","scrollPosition","scrollHeight","x"],"mappings":";;;;sBAE0BA,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAAlBC,M,mBAAAA,M;IAAQC,K,mBAAAA,K;;AAGhB,IAAMC,KAAK,GAAGD,KAAK,GAAG,GAAtB;AAEA,IAAME,WAAW,GAAGF,KAApB;AACA,IAAMG,YAAY,GAAGJ,MAArB;;AACA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD;AAAA,SAAON,MAAM,IAAIM,CAAC,GAAG,GAAR,CAAb;AAAA,CAAzB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD;AAAA,SAAOP,KAAK,IAAIO,CAAC,GAAG,GAAR,CAAZ;AAAA,CAAxB;;AACA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,eAAe,EAAE,GADC;AAElBC,EAAAA,gBAAgB,EAAE,GAFA;AAGlBC,EAAAA,gBAAgB,EAAE,GAHA;AAIlBC,EAAAA,aAAa,EAAE;AAJG,CAApB;AAMA,IAAMC,aAAa,GACjBb,KAAK,IAAIQ,WAAW,CAACC,eAArB,IAAwCV,MAAM,IAAIS,WAAW,CAACE,gBADhE;AAEA,IAAMI,cAAc,GAAGd,KAAK,GAAGQ,WAAW,CAACC,eAApB,IAAuCT,KAAK,GAAGQ,WAAW,CAACG,gBAAlF;AACA,IAAMI,WAAW,GAAGf,KAAK,IAAIQ,WAAW,CAACG,gBAAzC;AACA,IAAMK,oBAAoB,GAAGhB,KAAK,IAAIQ,WAAW,CAACI,aAAlD;AACA,IAAMK,SAAS,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAlC;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAc;AAC1C,MAAMC,OAAO,GAAGD,QAAQ,GAAGpB,KAA3B;;AACA,MAAIiB,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAOI,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BJ,OAA/B,CAAX,CAAP;AACD;;AAED,SAAOC,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BJ,OAA/B,CAAX,IAAsD,CAA7D;AACD,CAPD;;AASA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,aAAD,EAAmB;AAC5C,MAAIf,aAAJ,EAAmB;AACjB,WAAOe,aAAa,GAAG,CAAvB;AACD;;AACD,MAAId,cAAJ,EAAoB;AAClB,WAAOc,aAAP;AACD;;AACD,MAAIb,WAAJ,EAAiB;AACf,WAAOa,aAAa,GAAG,CAAvB;AACD;;AAED,SAAOA,aAAP;AACD,CAZD;;AAcA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,CAAf;AAAA,SAAqBA,CAAC,GAAG,IAAJ,GAAWD,YAAhC;AAAA,CAAvB;;AAEA,eAAe;AACbV,EAAAA,qBAAqB,EAArBA,qBADa;AAEbO,EAAAA,kBAAkB,EAAlBA,kBAFa;AAGbE,EAAAA,cAAc,EAAdA,cAHa;AAIb3B,EAAAA,WAAW,EAAXA,WAJa;AAKbC,EAAAA,YAAY,EAAZA,YALa;AAMbC,EAAAA,gBAAgB,EAAhBA,gBANa;AAObE,EAAAA,eAAe,EAAfA,eAPa;AAQbO,EAAAA,aAAa,EAAbA,aARa;AASbC,EAAAA,cAAc,EAAdA,cATa;AAUbC,EAAAA,WAAW,EAAXA,WAVa;AAWbC,EAAAA,oBAAoB,EAApBA,oBAXa;AAYbC,EAAAA,SAAS,EAATA;AAZa,CAAf","sourcesContent":["import { Dimensions, PixelRatio, Platform } from 'react-native';\n\nconst { height, width } = Dimensions.get('window');\n\n// based on iphone 5s's scale\nconst scale = width / 320;\n\nconst deviceWidth = width;\nconst deviceHeight = height;\nconst responsiveHeight = (h) => height * (h / 100);\nconst responsiveWidth = (w) => width * (w / 100);\nconst breakpoints = {\n  smallPhoneWidth: 320,\n  smallPhoneHeight: 600,\n  mediumPhoneWidth: 414,\n  bigPhoneWidth: 480,\n};\nconst isSmallScreen =\n  width <= breakpoints.smallPhoneWidth || height <= breakpoints.smallPhoneHeight;\nconst isNormalScreen = width > breakpoints.smallPhoneWidth && width < breakpoints.mediumPhoneWidth;\nconst isBigScreen = width >= breakpoints.mediumPhoneWidth;\nconst isBiggestPhoneScreen = width >= breakpoints.bigPhoneWidth;\nconst isAndroid = Platform.OS === 'android';\n\nconst getResponsiveFontSize = (fontSize) => {\n  const newSize = fontSize * scale;\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  }\n\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n};\n\nconst normalizedFontSize = (basicFontSize) => {\n  if (isSmallScreen) {\n    return basicFontSize - 6;\n  }\n  if (isNormalScreen) {\n    return basicFontSize;\n  }\n  if (isBigScreen) {\n    return basicFontSize + 1;\n  }\n\n  return basicFontSize;\n};\n\nconst scrollPosition = (scrollHeight, x) => x * 0.01 * scrollHeight;\n\nexport default {\n  getResponsiveFontSize,\n  normalizedFontSize,\n  scrollPosition,\n  deviceWidth,\n  deviceHeight,\n  responsiveHeight,\n  responsiveWidth,\n  isSmallScreen,\n  isNormalScreen,\n  isBigScreen,\n  isBiggestPhoneScreen,\n  isAndroid,\n};\n"]},"metadata":{},"sourceType":"module"}